// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoveYourBody.Service;

namespace MoveYourBody.Service.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220106195526_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MoveYourBody.Service.Models.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Training_sessionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Training_sessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Applicant");
                });

            modelBuilder.Entity("MoveYourBody.Service.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Img_src")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Img_src = "box.jpg",
                            Name = "Box"
                        },
                        new
                        {
                            Id = 2,
                            Img_src = "crossFitt.jpg",
                            Name = "Crossfit"
                        },
                        new
                        {
                            Id = 3,
                            Img_src = "football.jpg",
                            Name = "Labdarúgás"
                        },
                        new
                        {
                            Id = 4,
                            Img_src = "basketball.jpg",
                            Name = "Kosárlabda"
                        },
                        new
                        {
                            Id = 5,
                            Img_src = "handball.jpg",
                            Name = "Kézilabda"
                        },
                        new
                        {
                            Id = 6,
                            Img_src = "volleyball.jpg",
                            Name = "Röplabda"
                        },
                        new
                        {
                            Id = 7,
                            Img_src = "spartan.jpg",
                            Name = "Spartan"
                        },
                        new
                        {
                            Id = 8,
                            Img_src = "tennis.jpg",
                            Name = "Tenisz"
                        },
                        new
                        {
                            Id = 9,
                            Img_src = "trx.jpg",
                            Name = "TRX"
                        },
                        new
                        {
                            Id = 10,
                            Img_src = "swimming.jpg",
                            Name = "Úszás"
                        },
                        new
                        {
                            Id = 11,
                            Img_src = "riding.jpg",
                            Name = "Lovaglás"
                        },
                        new
                        {
                            Id = 12,
                            Img_src = "yoga.jpg",
                            Name = "Jóga"
                        });
                });

            modelBuilder.Entity("MoveYourBody.Service.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City_name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("County_name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("MoveYourBody.Service.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Colour = "#6610f2",
                            Name = "Csoportos"
                        },
                        new
                        {
                            Id = 2,
                            Colour = "#05A8AA",
                            Name = "Saját testsúlyos"
                        },
                        new
                        {
                            Id = 3,
                            Colour = "red",
                            Name = "Edzőterem"
                        },
                        new
                        {
                            Id = 4,
                            Colour = "black",
                            Name = "Szabadtéri"
                        },
                        new
                        {
                            Id = 5,
                            Colour = "#0dcaf0",
                            Name = "Zsírégető"
                        },
                        new
                        {
                            Id = 6,
                            Colour = "green",
                            Name = "Személyi edzés"
                        },
                        new
                        {
                            Id = 7,
                            Colour = "#D7263D",
                            Name = "Erőnléti"
                        },
                        new
                        {
                            Id = 8,
                            Colour = "blue",
                            Name = "Aerobic"
                        },
                        new
                        {
                            Id = 9,
                            Colour = "#373F51",
                            Name = "Rehabilitációs"
                        },
                        new
                        {
                            Id = 10,
                            Colour = "#9984D4",
                            Name = "Köredzés"
                        },
                        new
                        {
                            Id = 11,
                            Colour = "#F17300",
                            Name = "Bemelegítés"
                        },
                        new
                        {
                            Id = 12,
                            Colour = "#3A405A",
                            Name = "Flexibilitás"
                        });
                });

            modelBuilder.Entity("MoveYourBody.Service.Models.TagTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Tag_id")
                        .HasColumnType("int");

                    b.Property<int>("Training_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TagTraining");
                });

            modelBuilder.Entity("MoveYourBody.Service.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Category_id")
                        .HasColumnType("int");

                    b.Property<string>("Contact_phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("Max_member")
                        .HasColumnType("int");

                    b.Property<int>("Min_member")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("Trainer_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("MoveYourBody.Service.Models.TrainingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address_name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<string>("Place_name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingSession");
                });

            modelBuilder.Entity("MoveYourBody.Service.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(320) CHARACTER SET utf8mb4")
                        .HasMaxLength(320);

                    b.Property<string>("Full_name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("Location_id")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Phone_number")
                        .IsRequired()
                        .HasColumnType("varchar(12) CHARACTER SET utf8mb4")
                        .HasMaxLength(12);

                    b.Property<bool>("Trainer")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MoveYourBody.Service.Models.Applicant", b =>
                {
                    b.HasOne("MoveYourBody.Service.Models.TrainingSession", "Training_session")
                        .WithMany()
                        .HasForeignKey("Training_sessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoveYourBody.Service.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoveYourBody.Service.Models.TrainingSession", b =>
                {
                    b.HasOne("MoveYourBody.Service.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoveYourBody.Service.Models.Training", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
